# test_compiler.py

from MiniLang import Lexer, Parser, SemanticAnalyzer

def test_compiler(input_code):
    try:
        # Initialize the lexer with the input code
        lexer = Lexer(input_code)


        # Initialize the parser with the tokens generated by the lexer
        parser = Parser(lexer.tokens)


        # Call the parse method to evaluate the expression
        result = parser.parse()  # Now returns the evaluated result
        print(f"Result: {result}")  # Print the result
        


        # Initialize the semantic analyzer with the result
        semantic_analyzer = SemanticAnalyzer(result)
        semantic_analyzer.analyze()  
        
        print("Compilation successful!")
        return True
    except Exception as e:
        print(f"Compilation failed: {e}")
        return False
    
    

if __name__ == "__main__":
    with open('example_code.txt', 'r') as file:
        code = file.read()
    
    
    print(f"Testing code from file: \n{code}")
    test_compiler(code)

